{"version":3,"sources":["logo.svg","components/EditableCell.js","services/TaskOptimizer.js","components/Chores.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EditableCell","props","classNames","extraClassName","isCentered","backgroundContent","backgroundText","class","cellContent","Form","Control","type","placeholder","value","onChange","e","target","className","isHeader","self","context","globalContext","costs","normalizeCosts","bestTaskAssignment","bestTaskAssignmentScore","assignTasksRecursive","currentTaskAssignment","currentTaskAssignmentScore","scores","console","log","pId","participants","length","computeScoreForParticipant","assignment","newCosts","participantIdx","total","taskId","getCostAsFloat","taskIdx","defaultValue","participantCost","cost","parseFloat","getCost","isNaN","taskAssignment","participantScore","iterationContext","tasks","newAssignment","newScoreForParticipant","newIterationContext","Math","max","Chores","useState","name","setParticipants","setCosts","setScores","assignments","setAssignments","useEffect","recomputeTaskAssignments","updateCost","result","TaskOptimizer","assignTasks","isAssigned","participantHeaders","map","p","idx","participantIndex","newParticipants","getPct","parseInt","reduce","a","b","tableContent","t","taskIndex","newTasks","scoresContent","s","Table","bordered","responsive","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4766e227.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useRef, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport \"./EditableCell.css\";\n\nfunction EditableCell(props) {\n  const handleFromChange = e => {\n    props.onChange(e.target.value);\n  };\n\n  const classNames = [props.extraClassName, props.isCentered ? \"centered\" : \"\"];\n\n  const backgroundContent = props.backgroundText ? (\n    <div class=\"background-text\">{props.backgroundText}</div>\n  ) : (\n    <></>\n  );\n\n  const cellContent = (\n    <>\n      <Form.Control\n        type=\"text\"\n        placeholder={props.placeholder}\n        value={props.value}\n        onChange={handleFromChange}\n        className={classNames}\n      />\n\n      {backgroundContent}\n    </>\n  );\n\n  return props.isHeader === true ? (\n    <th>{cellContent}</th>\n  ) : (\n    <td>{cellContent}</td>\n  );\n}\n\nexport default EditableCell;\n","const self = {};\n\n/**\n * TaskAssignment:\n * TaskIdx -> ParticipantIdx\n */\n\nself.assignTasks = context => {\n  const globalContext = {\n    ...context,\n    costs: self.normalizeCosts(context.costs),\n    bestTaskAssignment: null,\n    bestTaskAssignmentScore: null\n  };\n  const iterationContext = {\n    currentTaskAssignment: {},\n    currentTaskAssignmentScore: 0\n  };\n  self.assignTasksRecursive(globalContext, iterationContext, 0);\n\n  const scores = [];\n\n  console.log(\"Finished optimizing\", globalContext.bestTaskAssignment);\n  for (var pId = 0; pId < globalContext.participants.length; pId++) {\n    scores[pId] = self.computeScoreForParticipant(\n      globalContext,\n      globalContext.bestTaskAssignment,\n      pId\n    );\n    console.log(\"Participant\", pId, scores[pId]);\n  }\n  return {\n    assignment: globalContext.bestTaskAssignment,\n    scores\n  };\n};\n\nself.normalizeCosts = costs => {\n  const newCosts = [];\n  console.log(\"normalizing\", costs);\n  for (\n    var participantIdx = 0;\n    participantIdx < costs.length;\n    participantIdx++\n  ) {\n    var total = 0;\n    for (var taskId = 0; taskId < costs[participantIdx].length; taskId++) {\n      total += self.getCostAsFloat(costs, participantIdx, taskId, 0);\n    }\n    newCosts[participantIdx] = [];\n    for (var taskId = 0; taskId < costs[participantIdx].length; taskId++) {\n      newCosts[participantIdx][taskId] =\n        total === 0\n          ? 0\n          : (self.getCostAsFloat(costs, participantIdx, taskId, 0) * 1.0) /\n            total;\n    }\n  }\n  return newCosts;\n};\n\nself.getCost = (costs, participantIdx, taskIdx, defaultValue) => {\n  if (!(participantIdx in costs)) return defaultValue;\n  const participantCost = costs[participantIdx];\n  if (!(taskIdx in participantCost)) return defaultValue;\n  return participantCost[taskIdx];\n};\n\nself.getCostAsFloat = (costs, participantIdx, taskIdx, defaultValue) => {\n  const cost = parseFloat(\n    self.getCost(costs, participantIdx, taskIdx, defaultValue)\n  );\n  if (isNaN(cost)) {\n    console.log(\"!!! Invalid cost\", cost);\n    return defaultValue;\n  }\n  return cost;\n};\n\nself.computeScoreForParticipant = (context, taskAssignment, participantIdx) => {\n  var participantScore = 0;\n  for (var taskIdx in taskAssignment) {\n    if (taskAssignment[taskIdx] === participantIdx) {\n      participantScore += self.getCostAsFloat(\n        context.costs,\n        participantIdx,\n        taskIdx,\n        0\n      );\n    }\n  }\n  return participantScore;\n};\n\nself.assignTasksRecursive = (globalContext, iterationContext, taskIdx) => {\n  if (taskIdx >= globalContext.tasks.length) {\n    console.log(\n      \"Assessment complete:\",\n      iterationContext.currentTaskAssignment,\n      iterationContext.currentTaskAssignmentScore\n    );\n    if (\n      globalContext.bestTaskAssignmentScore === null ||\n      iterationContext.currentTaskAssignmentScore <\n        globalContext.bestTaskAssignmentScore\n    ) {\n      console.log(\"Found better!\", globalContext.bestTaskAssignmentScore);\n      globalContext.bestTaskAssignmentScore =\n        iterationContext.currentTaskAssignmentScore;\n      globalContext.bestTaskAssignment = iterationContext.currentTaskAssignment;\n    }\n    return;\n  }\n\n  for (\n    var participantIdx = 0;\n    participantIdx < globalContext.participants.length;\n    participantIdx++\n  ) {\n    console.log(\n      \"participantIdx\",\n      taskIdx,\n      participantIdx,\n      iterationContext.currentTaskAssignment\n    );\n    const newAssignment = {\n      ...iterationContext.currentTaskAssignment\n    };\n    newAssignment[taskIdx] = participantIdx;\n\n    const newScoreForParticipant = self.computeScoreForParticipant(\n      globalContext,\n      newAssignment,\n      participantIdx\n    );\n\n    if (\n      // optimization\n      globalContext.bestTaskAssignment !== null &&\n      newScoreForParticipant >= globalContext.bestTaskAssignmentScore\n    ) {\n      console.log(\n        \"Won't continue\",\n        newScoreForParticipant,\n        globalContext.bestTaskAssignmentScore\n      );\n      continue;\n    }\n\n    var newIterationContext = {\n      currentTaskAssignment: newAssignment,\n      currentTaskAssignmentScore: Math.max(\n        newScoreForParticipant,\n        iterationContext.currentTaskAssignmentScore\n      )\n    };\n\n    self.assignTasksRecursive(globalContext, newIterationContext, taskIdx + 1);\n  }\n};\n\nexport default self;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport EditableCell from \"./EditableCell\";\nimport Table from \"react-bootstrap/Table\";\nimport \"./Chores.css\";\nimport TaskOptimizer from \"../services/TaskOptimizer\";\n\nfunction Chores(props) {\n  const [participants, setParticipants] = useState([\n    { name: \"Benjamin\" },\n    { name: \"Sepideh\" }\n  ]);\n\n  const [tasks, setTasks] = useState([\n    { name: \"Vaccum\" },\n    { name: \"Dishes\" },\n    { name: \"Keep kitchen clean\" },\n    { name: \"Laundry\" },\n    { name: \"Washing bathroom\" },\n    { name: \"Take out trash\" }\n  ]);\n\n  const [costs, setCosts] = useState([\n    [100, 100, 80, 20, 70, 10],\n    [5, 3, 6, 2, 7, 2]\n  ]);\n\n  const [scores, setScores] = useState([]);\n\n  const [assignments, setAssignments] = useState({});\n\n  useEffect(() => {\n    recomputeTaskAssignments();\n  }, []); //only once\n\n  const updateParticipantName = participantIndex => name => {\n    const newParticipants = [...participants]; // copy\n    newParticipants[participantIndex].name = name;\n    setParticipants(newParticipants);\n  };\n\n  const updateTaskName = taskIndex => name => {\n    const newTasks = [...tasks]; // copy\n    newTasks[taskIndex].name = name;\n    setParticipants(newTasks);\n  };\n\n  const updateCost = (participantIdx, taskIdx) => cost => {\n    const newCosts = [...costs]; //copy\n    if (!(participantIdx in newCosts)) newCosts[participantIdx] = [];\n    newCosts[participantIdx][taskIdx] = cost;\n    setCosts(newCosts);\n    recomputeTaskAssignments();\n  };\n\n  const recomputeTaskAssignments = () => {\n    const result = TaskOptimizer.assignTasks({\n      participants,\n      tasks,\n      costs\n    });\n    console.log(result);\n    setAssignments(result.assignment);\n    setScores(result.scores);\n  };\n\n  const isAssigned = (participantIdx, taskIdx) => {\n    return assignments && assignments[taskIdx] === participantIdx;\n  };\n\n  const participantHeaders = participants.map((p, idx) => (\n    <EditableCell\n      value={p.name}\n      onChange={updateParticipantName(idx)}\n      isHeader=\"true\"\n      isCentered=\"true\"\n    />\n  ));\n\n  const getPct = (participantIdx, taskIdx) => {\n    if (costs[participantIdx] && costs[participantIdx][taskIdx]) {\n      return (\n        parseInt(\n          (costs[participantIdx][taskIdx] * 100) /\n            costs[participantIdx].reduce((a, b) => a + b, 0)\n        ) + \"%\"\n      );\n    } else {\n      return \"q\";\n    }\n  };\n\n  const tableContent = tasks.map((t, taskIdx) => (\n    <tr>\n      <EditableCell value={t.name} onChange={updateTaskName(taskIdx)} />\n      {participants.map((p, participantIdx) => (\n        <EditableCell\n          value={TaskOptimizer.getCost(costs, participantIdx, taskIdx, \"\")}\n          isCentered=\"true\"\n          onChange={updateCost(participantIdx, taskIdx)}\n          placeholder=\"0\"\n          extraClassName={isAssigned(participantIdx, taskIdx) ? \"assigned\" : \"\"}\n          backgroundText={getPct(participantIdx, taskIdx)}\n        />\n      ))}\n    </tr>\n  ));\n\n  const scoresContent = scores.map(s => (\n    <>\n      <EditableCell\n        value={parseInt(s * 100) + \"%\"}\n        placeholder=\"-\"\n        isCentered=\"true\"\n      />\n    </>\n  ));\n\n  return (\n    <div>\n      <Table bordered responsive=\"lg\">\n        <thead>\n          <tr>\n            <th></th>\n            {participantHeaders}\n          </tr>\n        </thead>\n        <tbody>\n          {tableContent}\n          <tr>\n            <EditableCell value=\"(Scores)\" placeholder=\"-\" />\n            {scoresContent}\n          </tr>\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default Chores;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Chores from \"./components/Chores\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chores />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}