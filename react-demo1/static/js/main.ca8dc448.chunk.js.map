{"version":3,"sources":["Component1.js","Component2.js","App.js","serviceWorker.js","index.js"],"names":["Component1","props","state","counter","console","log","this","setState","onClick","setCounterToSameValue","bind","incrementCounter","React","Component","Component2","nextProps","nextState","shouldUpdate","PerformanceObserver","list","getEntries","entry","name","indexOf","observe","entryTypes","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6QAwCeA,E,kDAjCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,QAAS,GAFP,E,oEAMjBC,QAAQC,IAAI,0CACZC,KAAKC,SAAS,CAAEJ,QAASG,KAAKJ,MAAMC,Y,yCAIpCC,QAAQC,IAAI,wCACZC,KAAKC,SAAS,CAAEJ,QAASG,KAAKJ,MAAMC,QAAU,M,+BAK9C,OADAC,QAAQC,IAAI,2BAEV,2DACuBC,KAAKJ,MAAMC,QAChC,6BACA,4BAAQK,QAASF,KAAKG,sBAAsBC,KAAKJ,OAAjD,kBAGA,6BACA,4BAAQE,QAASF,KAAKK,iBAAiBD,KAAKJ,OAA5C,4B,GA1BiBM,IAAMC,WCsChBC,E,kDArCb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,QAAS,GAFP,E,iEAMjBC,QAAQC,IACN,mEAEFC,KAAKC,SAAS,CAAEJ,QAASG,KAAKJ,MAAMC,Y,yCAIpCC,QAAQC,IAAI,qCACZC,KAAKC,SAAS,CAAEJ,QAASG,KAAKJ,MAAMC,QAAU,M,4CAG1BY,EAAWC,GAC/B,IAAMC,EAAeD,EAAUb,UAAYG,KAAKJ,MAAMC,QAEtD,OADAC,QAAQC,IAAI,sCAAuCY,GAC5CA,I,+BAKP,OADAb,QAAQC,IAAI,2BAEV,2DACuBC,KAAKJ,MAAMC,QAChC,6BACA,4BAAQK,QAASF,KAAKK,iBAAiBD,KAAKJ,OAA5C,0B,GA9BiBM,IAAMC,WCDd,IAAIK,qBAAoB,SAAAC,GAAS,IAAD,gBAC3BA,EAAKC,cADsB,IAC/C,2BAAuC,CAAC,IAA7BC,EAA4B,QAClBA,EAAMC,KACVC,QAAQ,qBAAuB,GAC5CnB,QAAQC,IAAI,4BAA6BgB,IAJE,kCAQxCG,QAAQ,CAAEC,WAAY,CAAC,aAajBC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,6BACA,6BACA,kBAAC,EAAD,QCTcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,a","file":"static/js/main.ca8dc448.chunk.js","sourcesContent":["import React from \"react\";\n\n/**\n * Demo:\n * By default React will trigger a re-render when calling setState even if the resulting state is the same.\n */\nclass Component1 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { counter: 0 };\n  }\n\n  setCounterToSameValue() {\n    console.log(\"Component1 - set counter to same value\");\n    this.setState({ counter: this.state.counter });\n  }\n\n  incrementCounter() {\n    console.log(\"Component1 - incrementing counter...\");\n    this.setState({ counter: this.state.counter + 1 });\n  }\n\n  render() {\n    console.log(\"Component1 - Rendering!\");\n    return (\n      <>\n        Component1 counter: {this.state.counter}\n        <br />\n        <button onClick={this.setCounterToSameValue.bind(this)}>\n          set same state\n        </button>\n        <br />\n        <button onClick={this.incrementCounter.bind(this)}>\n          set different state\n        </button>\n      </>\n    );\n  }\n}\n\nexport default Component1;\n","import React from \"react\";\n\n/**\n * Demo:\n * React will trigger a cascading update warning even if the component doesn't re-render.\n */\nclass Component2 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { counter: 0 };\n  }\n\n  componentDidUpdate() {\n    console.log(\n      \"Component2 - componentDidUpdate - setting counter to same value\"\n    );\n    this.setState({ counter: this.state.counter });\n  }\n\n  incrementCounter() {\n    console.log(\"Component2 - incrementing counter\");\n    this.setState({ counter: this.state.counter + 1 });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = nextState.counter !== this.state.counter;\n    console.log(\"Component2 - shouldComponentUpdate?\", shouldUpdate);\n    return shouldUpdate;\n  }\n\n  render() {\n    console.log(\"Component2 - Rendering!\");\n    return (\n      <>\n        Component2 counter: {this.state.counter}\n        <br />\n        <button onClick={this.incrementCounter.bind(this)}>\n          increment counter\n        </button>\n      </>\n    );\n  }\n}\n\nexport default Component2;\n","import React from \"react\";\nimport \"./App.css\";\nimport Component1 from \"./Component1\";\nimport Component2 from \"./Component2\";\n\nconst observer = new PerformanceObserver(list => {\n  for (const entry of list.getEntries()) {\n    const metricName = entry.name;\n    if (metricName.indexOf(\"cascading update\") >= 0) {\n      console.log(\"Detected cascading update\", entry); // <---\n    }\n  }\n});\nobserver.observe({ entryTypes: [\"measure\"] });\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Component1 />\n      <br />\n      <br />\n      <Component2 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}